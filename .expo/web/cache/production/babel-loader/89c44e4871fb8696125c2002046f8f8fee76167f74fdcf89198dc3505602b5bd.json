{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useEffect,useLayoutEffect,useState}from'react';import{addNotificationResponseReceivedListener}from\"./NotificationsEmitter\";import NotificationsEmitterModule from\"./NotificationsEmitterModule\";export default function useLastNotificationResponse(){var _useState=useState(undefined),_useState2=_slicedToArray(_useState,2),lastNotificationResponse=_useState2[0],setLastNotificationResponse=_useState2[1];useLayoutEffect(function(){var subscription=addNotificationResponseReceivedListener(function(response){setLastNotificationResponse(response);});return function(){subscription.remove();};},[]);useEffect(function(){NotificationsEmitterModule.getLastNotificationResponseAsync==null?void 0:NotificationsEmitterModule.getLastNotificationResponseAsync().then(function(response){setLastNotificationResponse(function(currentResponse){return currentResponse!=null?currentResponse:response;});});},[]);return lastNotificationResponse;}","map":{"version":3,"names":["useEffect","useLayoutEffect","useState","addNotificationResponseReceivedListener","NotificationsEmitterModule","useLastNotificationResponse","_useState","undefined","_useState2","_slicedToArray","lastNotificationResponse","setLastNotificationResponse","subscription","response","remove","getLastNotificationResponseAsync","then","currentResponse"],"sources":["/Users/jinwook/react-native/daily-pt-frontend/node_modules/expo-notifications/src/useLastNotificationResponse.ts"],"sourcesContent":["import { useEffect, useLayoutEffect, useState } from 'react';\n\nimport { NotificationResponse } from './Notifications.types';\nimport { addNotificationResponseReceivedListener } from './NotificationsEmitter';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n/**\n * A React hook always returns the notification response that was received most recently\n * (a notification response designates an interaction with a notification, such as tapping on it).\n *\n * > If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.\n *\n * @return The hook may return one of these three types/values:\n * - `undefined` - until we're sure of what to return,\n * - `null` - if no notification response has been received yet,\n * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received.\n *\n * @example Responding to a notification tap by opening a URL that could be put into the notification's `data`\n * (opening the URL is your responsibility and is not a part of the `expo-notifications` API):\n * ```jsx\n * import * as Notifications from 'expo-notifications';\n * import { Linking } from 'react-native';\n *\n * export default function App() {\n *   const lastNotificationResponse = Notifications.useLastNotificationResponse();\n *   React.useEffect(() => {\n *     if (\n *       lastNotificationResponse &&\n *       lastNotificationResponse.notification.request.content.data.url &&\n *       lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n *     ) {\n *       Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n *     }\n *   }, [lastNotificationResponse]);\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport default function useLastNotificationResponse() {\n  const [lastNotificationResponse, setLastNotificationResponse] = useState<\n    NotificationResponse | null | undefined\n  >(undefined);\n\n  // useLayoutEffect ensures the listener is registered as soon as possible\n  useLayoutEffect(() => {\n    const subscription = addNotificationResponseReceivedListener((response) => {\n      setLastNotificationResponse(response);\n    });\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n\n  // On each mount of this hook we fetch last notification response\n  // from the native module which is an \"always active listener\"\n  // and always returns the most recent response.\n  useEffect(() => {\n    NotificationsEmitterModule.getLastNotificationResponseAsync?.().then((response) => {\n      // We only update the state with the resolved value if it's empty,\n      // because if it's not empty it must have been populated by the `useLayoutEffect`\n      // listener which returns \"live\" values.\n      setLastNotificationResponse((currentResponse) => currentResponse ?? response);\n    });\n  }, []);\n\n  return lastNotificationResponse;\n}\n"],"mappings":"iEAAA,OAASA,SAAS,CAAEC,eAAe,CAAEC,QAAQ,KAAQ,OAAO,CAG5D,OAASC,uCAAuC,8BAChD,MAAO,CAAAC,0BAA0B,oCAqCjC,cAAc,SAAU,CAAAC,2BAA2BA,CAAA,EACjD,IAAAC,SAAA,CAAgEJ,QAAQ,CAEtEK,SAAS,CAAC,CAAAC,UAAA,CAAAC,cAAA,CAAAH,SAAA,IAFLI,wBAAwB,CAAAF,UAAA,IAAEG,2BAA2B,CAAAH,UAAA,IAK5DP,eAAe,CAAC,UAAK,CACnB,GAAM,CAAAW,YAAY,CAAGT,uCAAuC,CAAC,SAACU,QAAQ,CAAI,CACxEF,2BAA2B,CAACE,QAAQ,CAAC,CACvC,CAAC,CAAC,CACF,MAAO,WAAK,CACVD,YAAY,CAACE,MAAM,EAAE,CACvB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAKNd,SAAS,CAAC,UAAK,CACbI,0BAA0B,CAACW,gCAAgC,cAA3DX,0BAA0B,CAACW,gCAAgC,EAAI,CAACC,IAAI,CAAC,SAACH,QAAQ,CAAI,CAIhFF,2BAA2B,CAAC,SAACM,eAAe,QAAK,CAAAA,eAAe,OAAfA,eAAe,CAAIJ,QAAQ,GAAC,CAC/E,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAH,wBAAwB,CACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}