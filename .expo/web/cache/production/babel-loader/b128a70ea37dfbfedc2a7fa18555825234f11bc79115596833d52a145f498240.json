{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{UnavailabilityError,Platform}from'expo-modules-core';import BadgeModule from\"./BadgeModule\";export default function setBadgeCountAsync(_x,_x2){return _setBadgeCountAsync.apply(this,arguments);}function _setBadgeCountAsync(){_setBadgeCountAsync=_asyncToGenerator(function*(badgeCount,options){if(!BadgeModule.setBadgeCountAsync){throw new UnavailabilityError('ExpoNotifications','setBadgeCountAsync');}return yield BadgeModule.setBadgeCountAsync(badgeCount,options==null?void 0:options[Platform.OS]);});return _setBadgeCountAsync.apply(this,arguments);}","map":{"version":3,"names":["UnavailabilityError","Platform","BadgeModule","setBadgeCountAsync","_x","_x2","_setBadgeCountAsync","apply","arguments","_asyncToGenerator","badgeCount","options","OS"],"sources":["/Users/jinwook/react-native/daily-pt-frontend/node_modules/expo-notifications/src/setBadgeCountAsync.ts"],"sourcesContent":["import { UnavailabilityError, Platform } from 'expo-modules-core';\n\nimport BadgeModule from './BadgeModule';\nimport { WebSetBadgeCountOptions } from './BadgeModule.types';\n\nexport interface SetBadgeCountOptions {\n  /**\n   * A configuration object described [in the `badgin` documentation](https://github.com/jaulz/badgin#options).\n   */\n  web?: WebSetBadgeCountOptions;\n}\n\n/**\n * Sets the badge of the app's icon to the specified number. Setting it to `0` clears the badge. On iOS, this method requires that you have requested\n * the user's permission for `allowBadge` via [`requestPermissionsAsync`](#notificationsrequestpermissionsasyncpermissions),\n * otherwise it will automatically return `false`.\n * > **Note:** Not all Android launchers support application badges. If the launcher does not support icon badges, the method will resolve to `false`.\n * @param badgeCount The count which should appear on the badge. A value of `0` will clear the badge.\n * @param options An object of options configuring behavior applied in Web environment.\n * @return It returns a Promise resolving to a boolean representing whether the setting of the badge succeeded.\n * @header badge\n */\nexport default async function setBadgeCountAsync(\n  badgeCount: number,\n  options?: SetBadgeCountOptions\n): Promise<boolean> {\n  if (!BadgeModule.setBadgeCountAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'setBadgeCountAsync');\n  }\n\n  return await BadgeModule.setBadgeCountAsync(badgeCount, options?.[Platform.OS]);\n}\n"],"mappings":"uEAAA,OAASA,mBAAmB,CAAEC,QAAQ,KAAQ,mBAAmB,CAEjE,MAAO,CAAAC,WAAW,qBAoBlB,uBAA8B,CAAAC,kBAAkBA,CAAAC,EAAA,CAAAC,GAAA,SAAAC,mBAAA,CAAAC,KAAA,MAAAC,SAAA,GAS/C,SAAAF,oBAAA,EAAAA,mBAAA,CAAAG,iBAAA,CATc,UACbC,UAAkB,CAClBC,OAA8B,EAE9B,GAAI,CAACT,WAAW,CAACC,kBAAkB,CAAE,CACnC,KAAM,IAAI,CAAAH,mBAAmB,CAAC,mBAAmB,CAAE,oBAAoB,CAAC,C,CAG1E,YAAa,CAAAE,WAAW,CAACC,kBAAkB,CAACO,UAAU,CAAEC,OAAO,cAAPA,OAAO,CAAGV,QAAQ,CAACW,EAAE,CAAC,CAAC,CACjF,CAAC,SAAAN,mBAAA,CAAAC,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}