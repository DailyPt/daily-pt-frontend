{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{UnavailabilityError}from'expo-modules-core';import BackgroundNotificationTasksModule from\"./BackgroundNotificationTasksModule.native\";export default function registerTaskAsync(_x){return _registerTaskAsync.apply(this,arguments);}function _registerTaskAsync(){_registerTaskAsync=_asyncToGenerator(function*(taskName){if(!BackgroundNotificationTasksModule.registerTaskAsync){throw new UnavailabilityError('Notifications','registerTaskAsync');}return yield BackgroundNotificationTasksModule.registerTaskAsync(taskName);});return _registerTaskAsync.apply(this,arguments);}","map":{"version":3,"names":["UnavailabilityError","BackgroundNotificationTasksModule","registerTaskAsync","_x","_registerTaskAsync","apply","arguments","_asyncToGenerator","taskName"],"sources":["/Users/jinwook/react-native/daily-pt-frontend/node_modules/expo-notifications/src/registerTaskAsync.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport BackgroundNotificationTasksModule from './BackgroundNotificationTasksModule.native';\n\n/**\n * When a notification is received while the app is backgrounded, using this function you can set a callback that will be run in response to that notification.\n * Under the hood, this function is run using `expo-task-manager`. You **must** define the task first, with [`TaskManager.defineTask`](/task-manager#taskmanagerdefinetasktaskname-taskexecutor).\n * Make sure you define it in the global scope.\n *\n * The callback function you define with `TaskManager.defineTask` will receive an object with the following fields:\n * - `data`: The remote payload delivered by either FCM (Android) or APNs (iOS). [See here for details](#pushnotificationtrigger).\n * - `error`: The error (if any) that occurred during execution of the task.\n * - `executionInfo`: JSON object of additional info related to the task, including the `taskName`.\n * @param taskName The string you passed to `TaskManager.defineTask` as the `taskName` parameter.\n *\n * @example\n * ```ts\n * import * as TaskManager from 'expo-task-manager';\n * import * as Notifications from 'expo-notifications';\n *\n * const BACKGROUND_NOTIFICATION_TASK = 'BACKGROUND-NOTIFICATION-TASK';\n *\n * TaskManager.defineTask(BACKGROUND_NOTIFICATION_TASK, ({ data, error, executionInfo }) => {\n *   console.log('Received a notification in the background!');\n *   // Do something with the notification data\n * });\n *\n * Notifications.registerTaskAsync(BACKGROUND_NOTIFICATION_TASK);\n * ```\n * @header inBackground\n */\nexport default async function registerTaskAsync(taskName: string): Promise<null> {\n  if (!BackgroundNotificationTasksModule.registerTaskAsync) {\n    throw new UnavailabilityError('Notifications', 'registerTaskAsync');\n  }\n\n  return await BackgroundNotificationTasksModule.registerTaskAsync(taskName);\n}\n"],"mappings":"uEAAA,OAASA,mBAAmB,KAAQ,mBAAmB,CAEvD,MAAO,CAAAC,iCAAiC,kDA6BxC,uBAA8B,CAAAC,iBAAiBA,CAAAC,EAAA,SAAAC,kBAAA,CAAAC,KAAA,MAAAC,SAAA,GAM9C,SAAAF,mBAAA,EAAAA,kBAAA,CAAAG,iBAAA,CANc,UAAiCC,QAAgB,EAC9D,GAAI,CAACP,iCAAiC,CAACC,iBAAiB,CAAE,CACxD,KAAM,IAAI,CAAAF,mBAAmB,CAAC,eAAe,CAAE,mBAAmB,CAAC,C,CAGrE,YAAa,CAAAC,iCAAiC,CAACC,iBAAiB,CAACM,QAAQ,CAAC,CAC5E,CAAC,SAAAJ,kBAAA,CAAAC,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}