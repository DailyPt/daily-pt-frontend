{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{UnavailabilityError}from'expo-modules-core';import NotificationScheduler from\"./NotificationScheduler\";export default function cancelScheduledNotificationAsync(_x){return _cancelScheduledNotificationAsync.apply(this,arguments);}function _cancelScheduledNotificationAsync(){_cancelScheduledNotificationAsync=_asyncToGenerator(function*(identifier){if(!NotificationScheduler.cancelScheduledNotificationAsync){throw new UnavailabilityError('Notifications','cancelScheduledNotificationAsync');}return yield NotificationScheduler.cancelScheduledNotificationAsync(identifier);});return _cancelScheduledNotificationAsync.apply(this,arguments);}","map":{"version":3,"names":["UnavailabilityError","NotificationScheduler","cancelScheduledNotificationAsync","_x","_cancelScheduledNotificationAsync","apply","arguments","_asyncToGenerator","identifier"],"sources":["/Users/jinwook/react-native/daily-pt-frontend/node_modules/expo-notifications/src/cancelScheduledNotificationAsync.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport NotificationScheduler from './NotificationScheduler';\n\n/**\n * Cancels a single scheduled notification. The scheduled notification of given ID will not trigger.\n * @param identifier The notification identifier with which `scheduleNotificationAsync` method resolved when the notification has been scheduled.\n * @return A Promise resolves once the scheduled notification is successfully canceled or if there is no scheduled notification for a given identifier.\n * @example Schedule and then cancel the notification:\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * async function scheduleAndCancel() {\n *   const identifier = await Notifications.scheduleNotificationAsync({\n *     content: {\n *       title: 'Hey!',\n *     },\n *     trigger: { seconds: 60, repeats: true },\n *   });\n *   await Notifications.cancelScheduledNotificationAsync(identifier);\n * }\n * ```\n * @header schedule\n */\nexport default async function cancelScheduledNotificationAsync(identifier: string): Promise<void> {\n  if (!NotificationScheduler.cancelScheduledNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'cancelScheduledNotificationAsync');\n  }\n\n  return await NotificationScheduler.cancelScheduledNotificationAsync(identifier);\n}\n"],"mappings":"uEAAA,OAASA,mBAAmB,KAAQ,mBAAmB,CAEvD,MAAO,CAAAC,qBAAqB,+BAsB5B,uBAA8B,CAAAC,gCAAgCA,CAAAC,EAAA,SAAAC,iCAAA,CAAAC,KAAA,MAAAC,SAAA,GAM7D,SAAAF,kCAAA,EAAAA,iCAAA,CAAAG,iBAAA,CANc,UAAgDC,UAAkB,EAC/E,GAAI,CAACP,qBAAqB,CAACC,gCAAgC,CAAE,CAC3D,KAAM,IAAI,CAAAF,mBAAmB,CAAC,eAAe,CAAE,kCAAkC,CAAC,C,CAGpF,YAAa,CAAAC,qBAAqB,CAACC,gCAAgC,CAACM,UAAU,CAAC,CACjF,CAAC,SAAAJ,iCAAA,CAAAC,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}