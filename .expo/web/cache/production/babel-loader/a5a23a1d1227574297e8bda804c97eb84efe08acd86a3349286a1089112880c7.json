{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{UnavailabilityError}from'expo-modules-core';import NotificationScheduler from\"./NotificationScheduler\";import{parseTrigger}from\"./scheduleNotificationAsync\";export default function getNextTriggerDateAsync(_x){return _getNextTriggerDateAsync.apply(this,arguments);}function _getNextTriggerDateAsync(){_getNextTriggerDateAsync=_asyncToGenerator(function*(trigger){if(!NotificationScheduler.getNextTriggerDateAsync){throw new UnavailabilityError('ExpoNotifications','getNextTriggerDateAsync');}return yield NotificationScheduler.getNextTriggerDateAsync(parseTrigger(trigger));});return _getNextTriggerDateAsync.apply(this,arguments);}","map":{"version":3,"names":["UnavailabilityError","NotificationScheduler","parseTrigger","getNextTriggerDateAsync","_x","_getNextTriggerDateAsync","apply","arguments","_asyncToGenerator","trigger"],"sources":["/Users/jinwook/react-native/daily-pt-frontend/node_modules/expo-notifications/src/getNextTriggerDateAsync.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport NotificationScheduler from './NotificationScheduler';\nimport { SchedulableNotificationTriggerInput } from './Notifications.types';\nimport { parseTrigger } from './scheduleNotificationAsync';\n\n/**\n * Allows you to check what will be the next trigger date for given notification trigger input.\n * @param trigger The schedulable notification trigger you would like to check next trigger date for (of type [`SchedulableNotificationTriggerInput`](#schedulablenotificationtriggerinput)).\n * @return If the return value is `null`, the notification won't be triggered. Otherwise, the return value is the Unix timestamp in milliseconds\n * at which the notification will be triggered.\n * @example Calculate next trigger date for a notification trigger:\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * async function logNextTriggerDate() {\n *   try {\n *     const nextTriggerDate = await Notifications.getNextTriggerDateAsync({\n *       hour: 9,\n *       minute: 0,\n *     });\n *     console.log(nextTriggerDate === null ? 'No next trigger date' : new Date(nextTriggerDate));\n *   } catch (e) {\n *     console.warn(`Couldn't have calculated next trigger date: ${e}`);\n *   }\n * }\n * ```\n * @header schedule\n */\nexport default async function getNextTriggerDateAsync(\n  trigger: SchedulableNotificationTriggerInput\n): Promise<number | null> {\n  if (!NotificationScheduler.getNextTriggerDateAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getNextTriggerDateAsync');\n  }\n\n  return await NotificationScheduler.getNextTriggerDateAsync(parseTrigger(trigger));\n}\n"],"mappings":"uEAAA,OAASA,mBAAmB,KAAQ,mBAAmB,CAEvD,MAAO,CAAAC,qBAAqB,+BAE5B,OAASC,YAAY,mCAyBrB,uBAA8B,CAAAC,uBAAuBA,CAAAC,EAAA,SAAAC,wBAAA,CAAAC,KAAA,MAAAC,SAAA,GAQpD,SAAAF,yBAAA,EAAAA,wBAAA,CAAAG,iBAAA,CARc,UACbC,OAA4C,EAE5C,GAAI,CAACR,qBAAqB,CAACE,uBAAuB,CAAE,CAClD,KAAM,IAAI,CAAAH,mBAAmB,CAAC,mBAAmB,CAAE,yBAAyB,CAAC,C,CAG/E,YAAa,CAAAC,qBAAqB,CAACE,uBAAuB,CAACD,YAAY,CAACO,OAAO,CAAC,CAAC,CACnF,CAAC,SAAAJ,wBAAA,CAAAC,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}