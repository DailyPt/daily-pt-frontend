{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{createPermissionHook,Platform,UnavailabilityError}from'expo-modules-core';import NotificationPermissionsModule from\"./NotificationPermissionsModule\";export function getPermissionsAsync(){return _getPermissionsAsync.apply(this,arguments);}function _getPermissionsAsync(){_getPermissionsAsync=_asyncToGenerator(function*(){if(!NotificationPermissionsModule.getPermissionsAsync){throw new UnavailabilityError('Notifications','getPermissionsAsync');}return yield NotificationPermissionsModule.getPermissionsAsync();});return _getPermissionsAsync.apply(this,arguments);}export function requestPermissionsAsync(_x){return _requestPermissionsAsync.apply(this,arguments);}function _requestPermissionsAsync(){_requestPermissionsAsync=_asyncToGenerator(function*(permissions){if(!NotificationPermissionsModule.requestPermissionsAsync){throw new UnavailabilityError('Notifications','requestPermissionsAsync');}var requestedPermissions=permissions!=null?permissions:{ios:{allowAlert:true,allowBadge:true,allowSound:true}};var requestedPlatformPermissions=requestedPermissions[Platform.OS];return yield NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);});return _requestPermissionsAsync.apply(this,arguments);}export var usePermissions=createPermissionHook({requestMethod:requestPermissionsAsync,getMethod:getPermissionsAsync});","map":{"version":3,"names":["createPermissionHook","Platform","UnavailabilityError","NotificationPermissionsModule","getPermissionsAsync","_getPermissionsAsync","apply","arguments","_asyncToGenerator","requestPermissionsAsync","_x","_requestPermissionsAsync","permissions","requestedPermissions","ios","allowAlert","allowBadge","allowSound","requestedPlatformPermissions","OS","usePermissions","requestMethod","getMethod"],"sources":["/Users/jinwook/react-native/daily-pt-frontend/node_modules/expo-notifications/src/NotificationPermissions.ts"],"sourcesContent":["import { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  NotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\n\n/**\n * Calling this function checks current permissions settings related to notifications.\n * It lets you verify whether the app is currently allowed to display alerts, play sounds, etc.\n * There is no user-facing effect of calling this.\n * @return It returns a `Promise` resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n * On iOS, make sure you [properly interpret the permissions response](#interpreting-the-ios-permissions-response).\n * @example Check if the app is allowed to send any type of notifications (interrupting and non-interruptingâ€“provisional on iOS).\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export async function allowsNotificationsAsync() {\n *   const settings = await Notifications.getPermissionsAsync();\n *   return (\n *     settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL\n *   );\n * }\n * ```\n * @header permissions\n */\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\n\n/**\n * Prompts the user for notification permissions according to request. **Request defaults to asking the user to allow displaying alerts,\n * setting badge count and playing sounds**.\n * @param permissions An object representing configuration for the request scope.\n * @return It returns a Promise resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n * On iOS, make sure you [properly interpret the permissions response](#interpreting-the-ios-permissions-response).\n * @example Prompts the user to allow the app to show alerts, play sounds, set badge count and let Siri read out messages through AirPods.\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export function requestPermissionsAsync() {\n *   return await Notifications.requestPermissionsAsync({\n *     ios: {\n *       allowAlert: true,\n *       allowBadge: true,\n *       allowSound: true,\n *       allowAnnouncements: true,\n *     },\n *   });\n * }\n * ```\n * @header permissions\n */\nexport async function requestPermissionsAsync(permissions?: NotificationPermissionsRequest) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n    },\n  };\n  const requestedPlatformPermissions = requestedPermissions[Platform.OS];\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to send and receive push notifications.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n * @example\n * ```ts\n * const [permissionResponse, requestPermission] = Notifications.usePermissions();\n * ```\n * @header permission\n */\nexport const usePermissions = createPermissionHook<\n  NotificationPermissionsStatus,\n  NotificationPermissionsRequest\n>({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync,\n});\n"],"mappings":"uEAAA,OAASA,oBAAoB,CAAEC,QAAQ,CAAEC,mBAAmB,KAAQ,mBAAmB,CAMvF,MAAO,CAAAC,6BAA6B,uCAqBpC,eAAsB,CAAAC,mBAAmBA,CAAA,SAAAC,oBAAA,CAAAC,KAAA,MAAAC,SAAA,GAMxC,SAAAF,qBAAA,EAAAA,oBAAA,CAAAG,iBAAA,CANM,WAAkC,CACvC,GAAI,CAACL,6BAA6B,CAACC,mBAAmB,CAAE,CACtD,KAAM,IAAI,CAAAF,mBAAmB,CAAC,eAAe,CAAE,qBAAqB,CAAC,C,CAGvE,YAAa,CAAAC,6BAA6B,CAACC,mBAAmB,EAAE,CAClE,CAAC,SAAAC,oBAAA,CAAAC,KAAA,MAAAC,SAAA,GAyBD,eAAsB,CAAAE,uBAAuBA,CAAAC,EAAA,SAAAC,wBAAA,CAAAL,KAAA,MAAAC,SAAA,GAc5C,SAAAI,yBAAA,EAAAA,wBAAA,CAAAH,iBAAA,CAdM,UAAuCI,WAA4C,EACxF,GAAI,CAACT,6BAA6B,CAACM,uBAAuB,CAAE,CAC1D,KAAM,IAAI,CAAAP,mBAAmB,CAAC,eAAe,CAAE,yBAAyB,CAAC,C,CAG3E,GAAM,CAAAW,oBAAoB,CAAGD,WAAW,OAAXA,WAAW,CAAI,CAC1CE,GAAG,CAAE,CACHC,UAAU,CAAE,IAAI,CAChBC,UAAU,CAAE,IAAI,CAChBC,UAAU,CAAE,I,EAEf,CACD,GAAM,CAAAC,4BAA4B,CAAGL,oBAAoB,CAACZ,QAAQ,CAACkB,EAAE,CAAC,CACtE,YAAa,CAAAhB,6BAA6B,CAACM,uBAAuB,CAACS,4BAA4B,CAAC,CAClG,CAAC,SAAAP,wBAAA,CAAAL,KAAA,MAAAC,SAAA,GAYD,MAAO,IAAM,CAAAa,cAAc,CAAGpB,oBAAoB,CAGhD,CACAqB,aAAa,CAAEZ,uBAAuB,CACtCa,SAAS,CAAElB,mB,CACZ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}