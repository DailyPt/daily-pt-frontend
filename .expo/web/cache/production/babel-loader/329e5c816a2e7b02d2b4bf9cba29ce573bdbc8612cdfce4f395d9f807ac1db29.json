{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import Constants from'expo-constants';import{CodedError,Platform,SyntheticPlatformEmitter}from'expo-modules-core';export default function getDevicePushTokenAsync(){return _getDevicePushTokenAsync.apply(this,arguments);}function _getDevicePushTokenAsync(){_getDevicePushTokenAsync=_asyncToGenerator(function*(){var data=yield _subscribeDeviceToPushNotificationsAsync();SyntheticPlatformEmitter.emit('onDevicePushToken',{devicePushToken:data});return{type:Platform.OS,data:data};});return _getDevicePushTokenAsync.apply(this,arguments);}function guardPermission(){if(!('Notification'in window)){throw new CodedError('ERR_UNAVAILABLE','The Web Notifications API is not available on this device.');}if(!navigator.serviceWorker){throw new CodedError('ERR_UNAVAILABLE','Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');}if(Notification.permission!=='granted'){throw new CodedError('ERR_NOTIFICATIONS_PERMISSION_DENIED',\"Cannot use web notifications without permissions granted. Request permissions with \\\"expo-permissions\\\".\");}}function _subscribeDeviceToPushNotificationsAsync(){return _subscribeDeviceToPushNotificationsAsync2.apply(this,arguments);}function _subscribeDeviceToPushNotificationsAsync2(){_subscribeDeviceToPushNotificationsAsync2=_asyncToGenerator(function*(){var _Constants$expoConfig,_Constants$expoConfig2,_Constants$expoConfig3,_Constants$expoConfig4,_Constants$expoConfig5,_Constants$expoConfig6;var vapidPublicKey=(_Constants$expoConfig=Constants.expoConfig)==null?void 0:(_Constants$expoConfig2=_Constants$expoConfig.notification)==null?void 0:_Constants$expoConfig2.vapidPublicKey;if(!vapidPublicKey){throw new CodedError('ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG','You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.');}var serviceWorkerPath=(_Constants$expoConfig3=Constants.expoConfig)==null?void 0:(_Constants$expoConfig4=_Constants$expoConfig3.notification)==null?void 0:_Constants$expoConfig4.serviceWorkerPath;if(!serviceWorkerPath){throw new CodedError('ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION','You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.');}guardPermission();var registration=null;try{registration=yield navigator.serviceWorker.register(serviceWorkerPath);}catch(error){throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\"Could not register this device for push notifications because the service worker (\"+serviceWorkerPath+\") could not be registered: \"+error);}yield navigator.serviceWorker.ready;if(!registration.active){throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED','Could not register this device for push notifications because the service worker is not active.');}var subscribeOptions={userVisibleOnly:true,applicationServerKey:_urlBase64ToUint8Array(vapidPublicKey)};var pushSubscription=null;try{pushSubscription=yield registration.pushManager.subscribe(subscribeOptions);}catch(error){throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED','The device was unable to register for remote notifications with the browser endpoint. ('+error+')');}var pushSubscriptionJson=pushSubscription.toJSON();var subscriptionObject={endpoint:pushSubscriptionJson.endpoint,keys:{p256dh:pushSubscriptionJson.keys.p256dh,auth:pushSubscriptionJson.keys.auth}};var notificationIcon=((_Constants$expoConfig5=(_Constants$expoConfig6=Constants.expoConfig)==null?void 0:_Constants$expoConfig6.notification)!=null?_Constants$expoConfig5:{}).icon;yield registration.active.postMessage(JSON.stringify({fromExpoWebClient:{notificationIcon:notificationIcon}}));return subscriptionObject;});return _subscribeDeviceToPushNotificationsAsync2.apply(this,arguments);}function _urlBase64ToUint8Array(base64String){var padding='='.repeat((4-base64String.length%4)%4);var base64=(base64String+padding).replace(/-/g,'+').replace(/_/g,'/');var rawData=window.atob(base64);var outputArray=new Uint8Array(rawData.length);for(var i=0;i<rawData.length;++i){outputArray[i]=rawData.charCodeAt(i);}return outputArray;}","map":{"version":3,"names":["Constants","CodedError","Platform","SyntheticPlatformEmitter","getDevicePushTokenAsync","_getDevicePushTokenAsync","apply","arguments","_asyncToGenerator","data","_subscribeDeviceToPushNotificationsAsync","emit","devicePushToken","type","OS","guardPermission","window","navigator","serviceWorker","Notification","permission","_subscribeDeviceToPushNotificationsAsync2","_Constants$expoConfig","_Constants$expoConfig2","_Constants$expoConfig3","_Constants$expoConfig4","_Constants$expoConfig5","_Constants$expoConfig6","vapidPublicKey","expoConfig","notification","serviceWorkerPath","registration","register","error","ready","active","subscribeOptions","userVisibleOnly","applicationServerKey","_urlBase64ToUint8Array","pushSubscription","pushManager","subscribe","pushSubscriptionJson","toJSON","subscriptionObject","endpoint","keys","p256dh","auth","notificationIcon","icon","postMessage","JSON","stringify","fromExpoWebClient","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt"],"sources":["/Users/jinwook/react-native/daily-pt-frontend/node_modules/expo-notifications/src/getDevicePushTokenAsync.web.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport { CodedError, Platform, SyntheticPlatformEmitter } from 'expo-modules-core';\n\nimport { DevicePushToken } from './Tokens.types';\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  const data = await _subscribeDeviceToPushNotificationsAsync();\n  SyntheticPlatformEmitter.emit('onDevicePushToken', { devicePushToken: data });\n  return { type: Platform.OS, data };\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'The Web Notifications API is not available on this device.'\n    );\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PERMISSION_DENIED',\n      `Cannot use web notifications without permissions granted. Request permissions with \"expo-permissions\".`\n    );\n  }\n}\n\nasync function _subscribeDeviceToPushNotificationsAsync(): Promise<DevicePushToken['data']> {\n  // @ts-expect-error: TODO: not on the schema\n  const vapidPublicKey: string | null = Constants.expoConfig?.notification?.vapidPublicKey;\n  if (!vapidPublicKey) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  // @ts-expect-error: TODO: not on the schema\n  const serviceWorkerPath = Constants.expoConfig?.notification?.serviceWorkerPath;\n  if (!serviceWorkerPath) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION',\n      'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.'\n    );\n  }\n  guardPermission();\n\n  let registration: ServiceWorkerRegistration | null = null;\n  try {\n    registration = await navigator.serviceWorker.register(serviceWorkerPath);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      `Could not register this device for push notifications because the service worker (${serviceWorkerPath}) could not be registered: ${error}`\n    );\n  }\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'Could not register this device for push notifications because the service worker is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey),\n  };\n  let pushSubscription: PushSubscription | null = null;\n  try {\n    pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'The device was unable to register for remote notifications with the browser endpoint. (' +\n        error +\n        ')'\n    );\n  }\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (Constants.expoConfig?.notification ?? {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}