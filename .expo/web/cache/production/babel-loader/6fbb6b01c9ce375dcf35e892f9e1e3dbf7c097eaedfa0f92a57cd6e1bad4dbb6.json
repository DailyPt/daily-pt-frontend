{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{EventEmitter,UnavailabilityError}from'expo-modules-core';import NotificationsEmitterModule from\"./NotificationsEmitterModule\";var emitter=new EventEmitter(NotificationsEmitterModule);var didReceiveNotificationEventName='onDidReceiveNotification';var didDropNotificationsEventName='onNotificationsDeleted';var didReceiveNotificationResponseEventName='onDidReceiveNotificationResponse';export var DEFAULT_ACTION_IDENTIFIER='expo.modules.notifications.actions.DEFAULT';export function addNotificationReceivedListener(listener){return emitter.addListener(didReceiveNotificationEventName,listener);}export function addNotificationsDroppedListener(listener){return emitter.addListener(didDropNotificationsEventName,listener);}export function addNotificationResponseReceivedListener(listener){return emitter.addListener(didReceiveNotificationResponseEventName,listener);}export function removeNotificationSubscription(subscription){emitter.removeSubscription(subscription);}export function getLastNotificationResponseAsync(){return _getLastNotificationResponseAsync.apply(this,arguments);}function _getLastNotificationResponseAsync(){_getLastNotificationResponseAsync=_asyncToGenerator(function*(){if(!NotificationsEmitterModule.getLastNotificationResponseAsync){throw new UnavailabilityError('ExpoNotifications','getLastNotificationResponseAsync');}return yield NotificationsEmitterModule.getLastNotificationResponseAsync();});return _getLastNotificationResponseAsync.apply(this,arguments);}","map":{"version":3,"names":["EventEmitter","UnavailabilityError","NotificationsEmitterModule","emitter","didReceiveNotificationEventName","didDropNotificationsEventName","didReceiveNotificationResponseEventName","DEFAULT_ACTION_IDENTIFIER","addNotificationReceivedListener","listener","addListener","addNotificationsDroppedListener","addNotificationResponseReceivedListener","removeNotificationSubscription","subscription","removeSubscription","getLastNotificationResponseAsync","_getLastNotificationResponseAsync","apply","arguments","_asyncToGenerator"],"sources":["/Users/jinwook/react-native/daily-pt-frontend/node_modules/expo-notifications/src/NotificationsEmitter.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationResponse } from './Notifications.types';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n// Web uses SyntheticEventEmitter\nconst emitter = new EventEmitter(NotificationsEmitterModule);\n\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n\n// @docsMissing\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n\n/**\n * Listeners registered by this method will be called whenever a notification is received while the app is running.\n * @param listener A function accepting a notification ([`Notification`](#notification)) as an argument.\n * @return A [`Subscription`](#subscription) object represents the subscription of the provided listener.\n * @example Registering a notification listener using a React hook:\n * ```jsx\n * import React from 'react';\n * import * as Notifications from 'expo-notifications';\n *\n * export default function App() {\n *   React.useEffect(() => {\n *     const subscription = Notifications.addNotificationReceivedListener(notification => {\n *       console.log(notification);\n *     });\n *     return () => subscription.remove();\n *   }, []);\n *\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport function addNotificationReceivedListener(\n  listener: (event: Notification) => void\n): Subscription {\n  return emitter.addListener<Notification>(didReceiveNotificationEventName, listener);\n}\n\n/**\n * Listeners registered by this method will be called whenever some notifications have been dropped by the server.\n * Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback.\n * More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).\n * @param listener A callback function.\n * @return A [`Subscription`](#subscription) object represents the subscription of the provided listener.\n * @header listen\n */\nexport function addNotificationsDroppedListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(didDropNotificationsEventName, listener);\n}\n\n/**\n * Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).\n * @param listener A function accepting notification response ([`NotificationResponse`](#notificationresponse)) as an argument.\n * @return A [`Subscription`](#subscription) object represents the subscription of the provided listener.\n * @example Register a notification responder listener:\n * ```jsx\n * import React from 'react';\n * import { Linking } from 'react-native';\n * import * as Notifications from 'expo-notifications';\n *\n * export default function Container() {\n *   React.useEffect(() => {\n *     const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n *       const url = response.notification.request.content.data.url;\n *       Linking.openURL(url);\n *     });\n *     return () => subscription.remove();\n *   }, []);\n *\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport function addNotificationResponseReceivedListener(\n  listener: (event: NotificationResponse) => void\n): Subscription {\n  return emitter.addListener<NotificationResponse>(\n    didReceiveNotificationResponseEventName,\n    listener\n  );\n}\n\n/**\n * Removes a notification subscription returned by an `addNotificationListener` call.\n * @param subscription A subscription returned by `addNotificationListener` method.\n * @header listen\n */\nexport function removeNotificationSubscription(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\n// @docsMissing\n/**\n * @header listen\n */\nexport async function getLastNotificationResponseAsync(): Promise<NotificationResponse | null> {\n  if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n  }\n  return await NotificationsEmitterModule.getLastNotificationResponseAsync();\n}\n"],"mappings":"uEAAA,OAASA,YAAY,CAAgBC,mBAAmB,KAAQ,mBAAmB,CAGnF,MAAO,CAAAC,0BAA0B,oCAGjC,GAAM,CAAAC,OAAO,CAAG,GAAI,CAAAH,YAAY,CAACE,0BAA0B,CAAC,CAE5D,GAAM,CAAAE,+BAA+B,CAAG,0BAA0B,CAClE,GAAM,CAAAC,6BAA6B,CAAG,wBAAwB,CAC9D,GAAM,CAAAC,uCAAuC,CAAG,kCAAkC,CAGlF,MAAO,IAAM,CAAAC,yBAAyB,CAAG,4CAA4C,CA0BrF,MAAM,SAAU,CAAAC,+BAA+BA,CAC7CC,QAAuC,EAEvC,MAAO,CAAAN,OAAO,CAACO,WAAW,CAAeN,+BAA+B,CAAEK,QAAQ,CAAC,CACrF,CAUA,MAAM,SAAU,CAAAE,+BAA+BA,CAACF,QAAoB,EAClE,MAAO,CAAAN,OAAO,CAACO,WAAW,CAAOL,6BAA6B,CAAEI,QAAQ,CAAC,CAC3E,CA4BA,MAAM,SAAU,CAAAG,uCAAuCA,CACrDH,QAA+C,EAE/C,MAAO,CAAAN,OAAO,CAACO,WAAW,CACxBJ,uCAAuC,CACvCG,QAAQ,CACT,CACH,CAOA,MAAM,SAAU,CAAAI,8BAA8BA,CAACC,YAA0B,EACvEX,OAAO,CAACY,kBAAkB,CAACD,YAAY,CAAC,CAC1C,CAMA,eAAsB,CAAAE,gCAAgCA,CAAA,SAAAC,iCAAA,CAAAC,KAAA,MAAAC,SAAA,GAKrD,SAAAF,kCAAA,EAAAA,iCAAA,CAAAG,iBAAA,CALM,WAA+C,CACpD,GAAI,CAAClB,0BAA0B,CAACc,gCAAgC,CAAE,CAChE,KAAM,IAAI,CAAAf,mBAAmB,CAAC,mBAAmB,CAAE,kCAAkC,CAAC,C,CAExF,YAAa,CAAAC,0BAA0B,CAACc,gCAAgC,EAAE,CAC5E,CAAC,SAAAC,iCAAA,CAAAC,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}