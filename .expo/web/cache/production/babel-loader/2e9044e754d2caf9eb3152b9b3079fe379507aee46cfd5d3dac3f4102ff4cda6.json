{"ast":null,"code":"import{EventEmitter,Platform}from'expo-modules-core';import PushTokenManager from\"./PushTokenManager\";var tokenEmitter=new EventEmitter(PushTokenManager);var newTokenEventName='onDevicePushToken';export function addPushTokenListener(listener){var wrappingListener=function wrappingListener(_ref){var devicePushToken=_ref.devicePushToken;return listener({data:devicePushToken,type:Platform.OS});};return tokenEmitter.addListener(newTokenEventName,wrappingListener);}export function removePushTokenSubscription(subscription){tokenEmitter.removeSubscription(subscription);}","map":{"version":3,"names":["EventEmitter","Platform","PushTokenManager","tokenEmitter","newTokenEventName","addPushTokenListener","listener","wrappingListener","_ref","devicePushToken","data","type","OS","addListener","removePushTokenSubscription","subscription","removeSubscription"],"sources":["/Users/jinwook/react-native/daily-pt-frontend/node_modules/expo-notifications/src/TokenEmitter.ts"],"sourcesContent":["import { EventEmitter, Subscription, Platform } from 'expo-modules-core';\n\nimport PushTokenManager from './PushTokenManager';\nimport { DevicePushToken } from './Tokens.types';\n\n/**\n * A function accepting a device push token ([`DevicePushToken`](#devicepushtoken)) as an argument.\n * > **Note:** You should not call `getDevicePushTokenAsync` inside this function, as it triggers the listener and may lead to an infinite loop.\n * @header fetch\n */\nexport type PushTokenListener = (token: DevicePushToken) => void;\n\n// Web uses SyntheticEventEmitter\nconst tokenEmitter = new EventEmitter(PushTokenManager);\nconst newTokenEventName = 'onDevicePushToken';\n\n/**\n * In rare situations, a push token may be changed by the push notification service while the app is running.\n * When a token is rolled, the old one becomes invalid and sending notifications to it will fail.\n * A push token listener will let you handle this situation gracefully by registering the new token with your backend right away.\n * @param listener A function accepting a push token as an argument, it will be called whenever the push token changes.\n * @return A [`Subscription`](#subscription) object represents the subscription of the provided listener.\n * @header fetch\n * @example Registering a push token listener using a React hook.\n * ```jsx\n * import React from 'react';\n * import * as Notifications from 'expo-notifications';\n *\n * import { registerDevicePushTokenAsync } from '../api';\n *\n * export default function App() {\n *   React.useEffect(() => {\n *     const subscription = Notifications.addPushTokenListener(registerDevicePushTokenAsync);\n *     return () => subscription.remove();\n *   }, []);\n *\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n */\nexport function addPushTokenListener(listener: PushTokenListener): Subscription {\n  const wrappingListener = ({ devicePushToken }) =>\n    listener({ data: devicePushToken, type: Platform.OS });\n  return tokenEmitter.addListener(newTokenEventName, wrappingListener);\n}\n\n/**\n * Removes a push token subscription returned by an `addPushTokenListener` call.\n * @param subscription A subscription returned by `addPushTokenListener` method.\n * @header fetch\n */\nexport function removePushTokenSubscription(subscription: Subscription) {\n  tokenEmitter.removeSubscription(subscription);\n}\n"],"mappings":"AAAA,OAASA,YAAY,CAAgBC,QAAQ,KAAQ,mBAAmB,CAExE,MAAO,CAAAC,gBAAgB,0BAWvB,GAAM,CAAAC,YAAY,CAAG,GAAI,CAAAH,YAAY,CAACE,gBAAgB,CAAC,CACvD,GAAM,CAAAE,iBAAiB,CAAG,mBAAmB,CA4B7C,MAAM,SAAU,CAAAC,oBAAoBA,CAACC,QAA2B,EAC9D,GAAM,CAAAC,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAAC,IAAA,KAAM,CAAAC,eAAe,CAAAD,IAAA,CAAfC,eAAe,OACzC,CAAAH,QAAQ,CAAC,CAAEI,IAAI,CAAED,eAAe,CAAEE,IAAI,CAAEV,QAAQ,CAACW,EAAE,CAAE,CAAC,GACxD,MAAO,CAAAT,YAAY,CAACU,WAAW,CAACT,iBAAiB,CAAEG,gBAAgB,CAAC,CACtE,CAOA,MAAM,SAAU,CAAAO,2BAA2BA,CAACC,YAA0B,EACpEZ,YAAY,CAACa,kBAAkB,CAACD,YAAY,CAAC,CAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}